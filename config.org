
#+title: Cameron's Exceptional Emacs
* ORG 
** basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** common settings
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
* exwm
#+BEGIN_SRC emacs-lisp
  ;;Why did I install this package? I use FVWM
  (use-package exwm
    :ensure t
    ;;:config
    ;;(require 'exwm-config)
    ;;(exwm-config-default)
    ) 
#+END_SRC
#+BEGIN_SRC emacs-lisp
(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-k") 'exwm-workspace-delete)
(global-set-key (kbd "s-w") 'exwm-workspace-swap)
#+END_SRC
* Special Keybinds
** Open Terminal
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-return>") 'vterm)
#+END_SRC
** subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      (?\" . ?\")
			      (?\' . ?\')
			      ))

  (electric-pair-mode t)
#+END_SRC
** setting default shell to BASH
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+END_SRC
* Special Files
** remove backup file creations
#+BEGIN_SRC emacs-lisp
(setq make-backup-file nil)
(setq auto-save-default nil)
#+END_SRC
* Making Nice Lookings
** Window system
#+BEGIN_SRC emacs-lisp
(when window-system (global-hl-line-mode t))
(when window-system (global-prettify-symbols-mode t))
#+END_SRC
** yes-or-no
 #+BEGIN_SRC emacs-lisp
 (defalias 'yes-or-no-p 'y-or-n-p)
 #+END_SRC
** Most basic of changes
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
;; I leave the menubar and disable the scrollbar
(menu-bar-mode 1)
(scroll-bar-mode 0)
(setq inhibit-startup-message t)
;; Turns off the bell
(setq ring-bell-function 'ignore)
(show-paren-mode 1)
;; This extends how much is stored in the kill ring
(setq kill-ring-max 100)
#+END_SRC
** show lines and columns on modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** show clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
** pretty symbols
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))
#+END_SRC
* Small Packages
** beacon
#+BEGIN_SRC emacs-lisp
;; Highlights cursor when you open buffer
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
;; Gives prompt to help in minibar
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
** symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC
** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** linum-relative
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
** async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-q" . er/expand-region))
#+END_SRC
** indent-guide
#+BEGIN_SRC emacs-lisp
  ;;This makes indents a bit easier to see
  (use-package indent-guide
    :ensure t
    :init (add-hook 'prog-mode-hook 'indent-hide-mode)
    )
    (setq indent-guide-char "É¸")
#+END_SRC
* vterm
#+BEGIN_SRC emacs-lisp
    ;;This is a superior terminal replacement to ansi-term
    (use-package vterm
      :ensure t
      :config
      (setq vterm-always-compile-module t)
      )

    ;;Colours for vterm (duplicate for sanity)
  ;;(set-face-attribute 'vterm-color-default nil :foreground "#c5c8c6" :background "#0d111a")
    (set-face-attribute 'vterm-color-black nil :foreground "#282a2e" :background "#373b41")
    (set-face-attribute 'vterm-color-red nil :foreground "#bf4646" :background "#f48a8a")
    (set-face-attribute 'vterm-color-green nil :foreground "#67b25f" :background "#a5d79f")
    (set-face-attribute 'vterm-color-yellow nil :foreground "#cfc44e" :background "#e1da84")
    (set-face-attribute 'vterm-color-blue nil :foreground "#516083" :background "#93a9e6")
    (set-face-attribute 'vterm-color-magenta nil :foreground "#b58dcc" :background "#c2b4d9")
    (set-face-attribute 'vterm-color-cyan nil :foreground "#758fc6" :background "#95a4c6")
    (set-face-attribute 'vterm-color-white nil :foreground "#d5d5d5" :background "#0d111a")
#+END_SRC
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-banner-logo-title "I am a Saint in the Church of Emacs"))
#+END_SRC
* modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  ;;This hides minor modes that I always have on, and don't need to see
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'which-key-mode)
    (diminish 'org-indent-mode))
#+END_SRC
* Buffers
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char)
    ("C-;" . avy-goto-line))
#+END_SRC
* dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
* hungry-delete
#+BEGIN_SRC emacs-lisp
  ;;I don't particularly like this package, but I see its use
  (use-package hungry-delete
      :ensure t
      ;;:config (global-hungry-delete-mode)
      )
#+END_SRC
* helpful
#+BEGIN_SRC emacs-lisp
  ;;Improved version of emacs help
  (use-package helpful
    :ensure t
    )

  ;;This replaces the default emacs keybinds
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  ;;These are some of the extended functions that helpful adds


  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  ;; Look up *F*unctions (excludes macros).
  ;;
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  (global-set-key (kbd "C-h C") #'helpful-command)

  ;;This is for IVY
  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable)
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+END_SRC
* mark-multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind
    ("C-c q" . 'mark-next-like-this))
#+END_SRC
* switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* Auto Completion
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    :init
    (add-hook 'after-init-hook 'global-company-mode)) 

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

  ;;This is what actually sets up company for C and C++

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode)
    ;;(add-hook 'python-mode-hook 'company-mode)
    (add-hook 'python-mode-hook 'company-mode)
  )
#+END_SRC
** company-irony
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))
#+END_SRC
** irony
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
** company-arduino
#+BEGIN_SRC emacs-lisp
  (use-package company-arduino
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-arduino)
    )
#+END_SRC
** company-jedi (rubbish)
#+BEGIN_SRC emacs-lisp
  ;;This is for auto completion of python code
  ;;(use-package company-jedi
  ;;  :ensure t
  ;;  :config
  ;;  (require 'company)
  ;;  (add-to-list 'company-backends 'company-jedi))

  ;;This is here because, python is a joke language
  ;;(use-package pyvenv
  ;;  :ensure t
  ;;  :hook((python-mode . pyvenv-mode)))
#+END_SRC
** anaconda-mode
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    )

  (add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC
** company-anaconda
#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :ensure t
    )

  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'anaconda-mode))
  (eval-after-load "company"
   '(add-to-list 'company-backends 'company-anaconda))
#+END_SRC
* window splitting function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* convenient functions
** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* macros
** placeholder
